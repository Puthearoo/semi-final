name: Full CI/CD Pipeline

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: Install backend dependencies
        run: |
          cd backend
          npm install
      - name: Run backend tests
        run: |
          cd backend
          npm test

  frontend-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install
      - name: Run frontend tests
        run: |
          cd frontend
          npm test

  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    steps:
      - uses: actions/checkout@v4

      - name: Package backend
        run: |
          tar -czf backend.tar.gz backend

      - name: Package frontend HTML files
        run: |
          # Create a directory structure that matches your server
          mkdir -p deploy-html
          # Copy all HTML files and related assets
          cp -r frontend/* deploy-html/ 2>/dev/null || true
          cp *.html deploy-html/ 2>/dev/null || true
          cp -r css/ js/ images/ deploy-html/ 2>/dev/null || true

          # Show what we're packaging
          echo "Packaging these files:"
          find deploy-html/ -type f -name "*.html" | head -10

          # Create archive
          tar -czf frontend.tar.gz deploy-html/

          # Show archive contents
          echo "Archive contents:"
          tar -tzf frontend.tar.gz | head -10

      - name: Test SSH connection
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: echo "✅ SSH connection successful"

      - name: Upload backend
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "backend.tar.gz"
          target: "/tmp/"

      - name: Upload frontend
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "frontend.tar.gz"
          target: "/tmp/"

      - name: Deploy backend
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            APP_DIR="/home/${{ secrets.SSH_USER }}/backend"
            PM2_APP_NAME="sample-backend"

            mkdir -p $APP_DIR
            tar -xzf /tmp/backend.tar.gz -C $APP_DIR --strip-components=1
            cd $APP_DIR
            npm install --production

            if ! command -v pm2 &> /dev/null; then
              npm install -g pm2
            fi

            pm2 delete $PM2_APP_NAME 2>/dev/null || true
            pm2 start npm --name "$PM2_APP_NAME" -- start
            pm2 save
            echo "✅ Backend deployed successfully!"

      - name: Deploy frontend
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            FRONT_DIR="/var/www/html"

            # Debug: Show what's in the archive
            echo "Contents of frontend archive:"
            tar -tzf /tmp/frontend.tar.gz | head -10

            # Clean target directory
            sudo rm -rf $FRONT_DIR/*

            # Extract files
            sudo tar -xzf /tmp/frontend.tar.gz -C $FRONT_DIR --strip-components=1

            # Debug: Show deployed files
            echo "Deployed files:"
            sudo ls -la $FRONT_DIR
            echo "HTML files:"
            sudo find $FRONT_DIR -name "*.html" -exec ls -la {} \;

            # Set permissions
            sudo chown -R www-data:www-data $FRONT_DIR
            sudo chmod -R 755 $FRONT_DIR

            # Install nginx if not exists
            if ! command -v nginx &> /dev/null; then
              sudo apt update
              sudo apt install nginx -y
            fi

            # Start or reload nginx
            if sudo systemctl is-active --quiet nginx; then
              sudo systemctl reload nginx
            else
              sudo systemctl start nginx
              sudo systemctl enable nginx
            fi

            echo "✅ Frontend deployed successfully!"
