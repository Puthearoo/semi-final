name: Full CI/CD Pipeline

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  # ------------------ Backend Tests ------------------
  backend-test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: Install backend dependencies
        run: cd backend && npm install
      - name: Run backend tests
        run: cd backend && npm test

  # ------------------ Frontend Tests ------------------
  frontend-test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: Install frontend dependencies
        run: cd frontend && npm install
      - name: Run frontend tests
        run: cd frontend && npm test -- --watchAll=false --passWithNoTests

  # ------------------ Deploy to Server ------------------
  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Package applications
      - name: Package backend
        run: tar -czf backend.tar.gz backend

      - name: Build and package frontend
        run: |
          cd frontend
          npm install
          npm run build
          cd ..
          tar -czf frontend.tar.gz frontend/build

      # Create SSH tunnel via ngrok since server is on private network
      - name: Setup ngrok SSH tunnel
        id: ngrok-tunnel
        run: |
          # Install the latest version of ngrok (fixing the version issue)
          echo "📦 Installing latest ngrok version..."
          wget -q https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz -O ngrok.tgz
          tar -xzf ngrok.tgz
          chmod +x ngrok
          rm ngrok.tgz

          # Set up ngrok with auth token
          ./ngrok config add-authtoken "${{ secrets.NGROK_AUTH_TOKEN }}"

          # Start ngrok TCP tunnel for SSH
          ./ngrok tcp 22 --log=stdout > ngrok.log &
          NGORK_PID=$!
          sleep 5

          # Get public URL
          for i in {1..10}; do
            if curl -s http://127.0.0.1:4040/api/tunnels > tunnels.json; then
              NGROK_URL=$(grep -o 'tcp://[^"]*' tunnels.json | head -1)
              if [ -n "$NGROK_URL" ]; then
                break
              fi
            fi
            sleep 2
          done

          if [ -z "$NGROK_URL" ]; then
            echo "❌ Failed to get ngrok URL"
            cat ngrok.log
            # Try to kill ngrok process
            kill $NGORK_PID 2>/dev/null || true
            exit 1
          fi

          # Extract host and port from URL (tcp://0.tcp.ngrok.io:12345 → 0.tcp.ngrok.io:12345)
          NGROK_HOST_PORT=$(echo $NGROK_URL | sed 's/tcp:\/\///')
          NGROK_HOST=$(echo $NGROK_HOST_PORT | cut -d: -f1)
          NGROK_PORT=$(echo $NGROK_HOST_PORT | cut -d: -f2)

          echo "NGROK_HOST=$NGROK_HOST" >> $GITHUB_ENV
          echo "NGROK_PORT=$NGROK_PORT" >> $GITHUB_ENV
          echo "🌐 Ngrok tunnel established: $NGROK_HOST:$NGROK_PORT"

      # Test SSH connection through ngrok tunnel
      - name: Test SSH Connection
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ env.NGROK_HOST }}
          port: ${{ env.NGROK_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: echo "✅ SSH connection successful through ngrok tunnel"

      # Upload packages to server through ngrok tunnel
      - name: Upload backend
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.NGROK_HOST }}
          port: ${{ env.NGROK_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "backend.tar.gz"
          target: "/tmp/"

      - name: Upload frontend
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.NGROK_HOST }}
          port: ${{ env.NGROK_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "frontend.tar.gz"
          target: "/tmp/"

      # Deploy applications to server
      - name: Deploy backend
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ env.NGROK_HOST }}
          port: ${{ env.NGROK_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "🚀 Starting backend deployment..."

            # Install Node.js if not present
            if ! command -v node &> /dev/null; then
              echo "📦 Installing Node.js..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi

            # Install PM2 if not present
            if ! command -v pm2 &> /dev/null; then
              echo "📦 Installing PM2..."
              sudo npm install -g pm2
            fi

            APP_DIR="/home/roo/backend"
            PM2_APP_NAME="semi-backend"

            # Create app directory
            mkdir -p $APP_DIR

            # Extract and setup backend
            tar -xzf /tmp/backend.tar.gz -C $APP_DIR --strip-components=1
            cd $APP_DIR
            npm install --production

            # Start with PM2
            pm2 delete $PM2_APP_NAME 2>/dev/null || true
            pm2 start npm --name "$PM2_APP_NAME" -- start
            pm2 save
            pm2 startup 2>/dev/null || true

            echo "✅ Backend deployed successfully!"

      - name: Deploy frontend
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ env.NGROK_HOST }}
          port: ${{ env.NGROK_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "🚀 Starting frontend deployment..."

            FRONT_DIR="/var/www/html"

            # Install nginx if not present
            if ! command -v nginx &> /dev/null; then
              echo "📦 Installing nginx..."
              sudo apt update
              sudo apt install nginx -y
            fi

            # Create web directory
            sudo mkdir -p $FRONT_DIR

            # Extract frontend build
            sudo tar -xzf /tmp/frontend.tar.gz -C $FRONT_DIR --strip-components=1
            sudo chown -R www-data:www-data $FRONT_DIR
            sudo chmod -R 755 $FRONT_DIR

            # Configure nginx
            echo "📝 Configuring nginx..."
            sudo bash -c 'cat > /etc/nginx/sites-available/default << EOF
            server {
                listen 80 default_server;
                listen [::]:80 default_server;
                
                root /var/www/html;
                index index.html index.htm;
                
                server_name _;
                
                location / {
                    try_files \$uri \$uri/ /index.html;
                }
                
                # Proxy API requests to backend
                location /api {
                    proxy_pass http://localhost:3000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                }
            }
            EOF'

            # Enable and start nginx
            sudo systemctl enable nginx
            if sudo systemctl is-active --quiet nginx; then
              sudo systemctl reload nginx
            else
              sudo systemctl start nginx
            fi

            echo "✅ Frontend deployed successfully!"

      # Setup ngrok tunnel for application access
      - name: Setup ngrok for application access
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ env.NGROK_HOST }}
          port: ${{ env.NGROK_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "🌐 Setting up ngrok for application access..."

            # Install latest ngrok version on server
            if ! command -v ngrok &> /dev/null; then
              echo "📦 Installing ngrok on server..."
              wget -q https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz -O ngrok.tgz
              tar -xzf ngrok.tgz
              sudo mv ngrok /usr/local/bin/
              rm ngrok.tgz
            fi

            # Create ngrok config directory and file
            mkdir -p ~/.config/ngrok
            echo "authtoken: ${{ secrets.NGROK_AUTH_TOKEN }}" > ~/.config/ngrok/ngrok.yml
            echo "web_addr: 0.0.0.0:4040" >> ~/.config/ngrok/ngrok.yml

            # Kill any existing ngrok processes
            pkill -f "ngrok http" || true
            sleep 2

            # Start ngrok for port 80 (nginx)
            nohup ngrok http 80 --log=stdout > /tmp/ngrok.log 2>&1 &
            sleep 5

            # Check if ngrok started successfully
            if pgrep -f "ngrok http" > /dev/null; then
              echo "✅ ngrok tunnel started successfully"
              
              # Try to get URL with retries
              for i in {1..10}; do
                if curl -s http://127.0.0.1:4040/api/tunnels > /tmp/tunnels.json; then
                  URL=$(grep -o '"public_url":"https://[^"]*"' /tmp/tunnels.json | head -1 | cut -d'"' -f4)
                  if [ -n "$URL" ]; then
                    echo "🌐 Your application is available at: $URL"
                    break
                  fi
                fi
                sleep 2
              done
              
              if [ -z "$URL" ]; then
                echo "⚠️  Could not retrieve URL. Check ngrok logs:"
                cat /tmp/ngrok.log || true
              fi
            else
              echo "❌ ngrok failed to start"
              cat /tmp/ngrok.log || true
              exit 1
            fi

      # Cleanup ngrok tunnel
      - name: Cleanup ngrok tunnel
        if: always()
        run: |
          pkill -f "ngrok tcp" || true
          echo "🔒 Ngrok tunnel closed"
