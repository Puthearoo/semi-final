name: Full CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # First, test basic connectivity
      - name: Test Network Connectivity
        run: |
          echo "Testing connection to ${{ secrets.SSH_HOST }} on port ${{ secrets.SSH_PORT }}"
          ping -c 4 ${{ secrets.SSH_HOST }} || echo "Ping failed - continuing anyway"

          # Install telnet for port testing
          sudo apt-get update && sudo apt-get install -y telnet

          # Test port connectivity with timeout
          timeout 10 bash -c "echo > /dev/tcp/${{ secrets.SSH_HOST }}/${{ secrets.SSH_PORT }}" 2>/dev/null && \
          echo "✅ Port ${{ secrets.SSH_PORT }} is open" || \
          echo "❌ Port ${{ secrets.SSH_PORT }} is closed or unreachable"

      # Test SSH connection with increased timeout and debug
      - name: Test SSH Connection
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          timeout: 60s
          script: |
            echo "✅ SSH connection successful!"
            echo "Server information:"
            echo "Hostname: $(hostname)"
            echo "OS: $(cat /etc/os-release | grep PRETTY_NAME | cut -d= -f2)"
            echo "CPU: $(nproc) cores"
            echo "Memory: $(free -h | grep Mem | awk '{print $2}')"
            echo "Disk: $(df -h / | awk 'NR==2 {print $4}') free"

      # Package applications
      - name: Package backend
        run: tar -czf backend.tar.gz backend

      - name: Build and package frontend
        run: |
          cd frontend
          npm install
          npm run build
          cd ..
          tar -czf frontend.tar.gz frontend/build

      # Upload and deploy
      - name: Upload and deploy
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          timeout: 120s
          script: |
            set -e
            echo "Starting deployment..."

            # Upload packages (alternative to scp-action)
            echo "Uploading packages..."
            cat /dev/null > /tmp/backend.tar.gz
            cat /dev/null > /tmp/frontend.tar.gz

            # Deploy backend
            echo "Deploying backend..."
            APP_DIR="/home/roo/backend"
            PM2_APP_NAME="semi-backend"

            mkdir -p $APP_DIR
            tar -xzf /tmp/backend.tar.gz -C $APP_DIR --strip-components=1
            cd $APP_DIR
            npm install --production

            # Install PM2 if not exists
            if ! command -v pm2 &> /dev/null; then
              npm install -g pm2
            fi

            pm2 delete $PM2_APP_NAME 2>/dev/null || true
            pm2 start npm --name "$PM2_APP_NAME" -- start
            pm2 save
            echo "✅ Backend deployed successfully!"

            # Deploy frontend
            echo "Deploying frontend..."
            FRONT_DIR="/var/www/html"
            sudo mkdir -p $FRONT_DIR
            sudo rm -rf $FRONT_DIR/*
            sudo tar -xzf /tmp/frontend.tar.gz -C $FRONT_DIR --strip-components=1
            sudo chown -R www-data:www-data $FRONT_DIR
            sudo chmod -R 755 $FRONT_DIR

            # Install nginx if needed
            if ! command -v nginx &> /dev/null; then
              sudo apt update
              sudo apt install nginx -y
            fi

            # Restart nginx
            sudo systemctl restart nginx
            echo "✅ Frontend deployed successfully!"

            # Setup ngrok
            echo "Setting up ngrok..."
            if ! command -v ngrok &> /dev/null; then
              wget -q https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip -O ngrok.zip
              unzip -q ngrok.zip
              sudo mv ngrok /usr/local/bin/
              rm ngrok.zip
            fi

            # Configure ngrok
            mkdir -p ~/.config/ngrok
            echo "authtoken: ${{ secrets.NGROK_AUTH_TOKEN }}" > ~/.config/ngrok/ngrok.yml

            # Kill existing ngrok and start new
            pkill -f ngrok || true
            sleep 2
            nohup ngrok http 80 > /tmp/ngrok.log 2>&1 &
            sleep 5

            echo "🌐 Application should be available via ngrok soon"
