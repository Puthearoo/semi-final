name: Full CI/CD Pipeline

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  # ------------------ Backend Tests ------------------
  backend-test:
    # Run tests on PR to main
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      - name: Run backend tests
        run: |
          cd backend
          npm test

  # ------------------ Frontend Tests ------------------
  frontend-test:
    # Run tests on PR to main
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --watchAll=false --passWithNoTests

  # ------------------ Deploy to Server ------------------
  deploy:
    # Only deploy when code is pushed/merged to main branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # --- Package Backend ---
      - name: Package backend
        run: |
          tar -czf backend.tar.gz backend

      # --- Build and Package Frontend ---
      - name: Build and package frontend
        run: |
          cd frontend
          npm install
          npm run build
          cd ..
          tar -czf frontend.tar.gz frontend/build

      # --- Test SSH Connection ---
      - name: Test SSH
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: echo "✅ SSH connection successful"

      # --- Upload Packages ---
      - name: Upload backend
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "backend.tar.gz"
          target: "/tmp/"

      - name: Upload frontend
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "frontend.tar.gz"
          target: "/tmp/"

      # --- Deploy Backend ---
      - name: Deploy backend
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            APP_DIR="/home/roo/backend"
            PM2_APP_NAME="semi-backend"

            mkdir -p $APP_DIR
            tar -xzf /tmp/backend.tar.gz -C $APP_DIR --strip-components=1
            cd $APP_DIR
            npm install --production

            pm2 delete $PM2_APP_NAME 2>/dev/null || true
            pm2 start npm --name "$PM2_APP_NAME" -- start
            pm2 save
            echo "✅ Backend deployed successfully!"

      # --- Deploy Frontend ---
      - name: Deploy frontend
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            FRONT_DIR="/var/www/html"
            sudo mkdir -p $FRONT_DIR
            sudo rm -rf $FRONT_DIR/*
            sudo tar -xzf /tmp/frontend.tar.gz -C $FRONT_DIR --strip-components=1
            sudo chown -R www-data:www-data $FRONT_DIR
            sudo chmod -R 755 $FRONT_DIR
            sudo systemctl reload nginx
            echo "✅ Frontend deployed successfully!"

      # --- Setup ngrok Tunnel ---
      - name: Setup ngrok
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            if ! command -v ngrok &> /dev/null; then
              wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip -O ngrok.zip
              unzip ngrok.zip
              sudo mv ngrok /usr/local/bin/
              rm ngrok.zip
            fi
            ngrok authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
            pkill ngrok || true
            nohup ngrok http 3000 > /tmp/ngrok.log 2>&1 &
            sleep 5
            echo "✅ ngrok tunnel started"
            curl -s http://127.0.0.1:4040/api/tunnels | grep -o '"public_url":"[^"]*"'
