name: Full CI/CD Pipeline

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  # ------------------ Backend Tests ------------------
  backend-test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: Install backend dependencies
        run: cd backend && npm install
      - name: Run backend tests
        run: cd backend && npm test

  # ------------------ Frontend Tests ------------------
  frontend-test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: Install frontend dependencies
        run: cd frontend && npm install
      - name: Run frontend tests
        run: cd frontend && npm test -- --watchAll=false --passWithNoTests

  # ------------------ Deploy to Server ------------------
  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Package applications
      - name: Package backend
        run: tar -czf backend.tar.gz backend

      - name: Build and package frontend
        run: |
          cd frontend
          npm install
          npm run build
          cd ..
          tar -czf frontend.tar.gz frontend/build

      # Debug: Show SSH key info (masked)
      - name: Debug SSH Key
        run: |
          echo "SSH key length: ${#SSH_PRIVATE_KEY}"
          echo "SSH key starts with: $(echo "${{ secrets.SSH_PRIVATE_KEY }}" | head -c 20)"
          echo "SSH user: ${{ secrets.SSH_USER }}"

      # Create SSH tunnel via ngrok since server is on private network
      - name: Setup ngrok SSH tunnel
        id: ngrok-tunnel
        run: |
          # Install the latest version of ngrok
          echo "📦 Installing latest ngrok version..."
          wget -q https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz -O ngrok.tgz
          tar -xzf ngrok.tgz
          chmod +x ngrok
          rm ngrok.tgz

          # Set up ngrok with auth token
          ./ngrok config add-authtoken "${{ secrets.NGROK_AUTH_TOKEN }}"

          # Start ngrok TCP tunnel for SSH
          ./ngrok tcp 22 --log=stdout > ngrok.log &
          NGORK_PID=$!
          sleep 8

          # Get public URL with multiple retries
          for i in {1..15}; do
            if curl -s http://127.0.0.1:4040/api/tunnels > tunnels.json 2>/dev/null; then
              NGROK_URL=$(grep -o 'tcp://[^"]*' tunnels.json | head -1)
              if [ -n "$NGROK_URL" ]; then
                break
              fi
            fi
            echo "Attempt $i: Waiting for ngrok tunnel to be ready..."
            sleep 3
          done

          if [ -z "$NGROK_URL" ]; then
            echo "❌ Failed to get ngrok URL after 15 attempts"
            echo "Ngrok log:"
            cat ngrok.log
            echo "Tunnels API response:"
            cat tunnels.json 2>/dev/null || echo "No tunnels.json file"
            # Try to kill ngrok process
            kill $NGORK_PID 2>/dev/null || true
            exit 1
          fi

          # Extract host and port from URL
          NGROK_HOST_PORT=$(echo $NGROK_URL | sed 's/tcp:\/\///')
          NGROK_HOST=$(echo $NGROK_HOST_PORT | cut -d: -f1)
          NGROK_PORT=$(echo $NGROK_HOST_PORT | cut -d: -f2)

          echo "NGROK_HOST=$NGROK_HOST" >> $GITHUB_ENV
          echo "NGROK_PORT=$NGROK_PORT" >> $GITHUB_ENV
          echo "🌐 Ngrok tunnel established: $NGROK_HOST:$NGROK_PORT"

      # Test basic connectivity first
      - name: Test basic connectivity
        run: |
          echo "Testing connectivity to ${{ env.NGROK_HOST }}:${{ env.NGROK_PORT }}"
          timeout 10 bash -c "echo > /dev/tcp/${{ env.NGROK_HOST }}/${{ env.NGROK_PORT }}" && \
          echo "✅ Port is open" || \
          echo "❌ Port is not accessible"

      # Test SSH connection with verbose output
      - name: Test SSH Connection
        run: |
          # Create temporary SSH key file
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > tmp_key
          chmod 600 tmp_key

          # Test SSH connection with verbose output
          echo "Testing SSH connection to ${{ secrets.SSH_USER }}@${{ env.NGROK_HOST }}:${{ env.NGROK_PORT }}"
          ssh -v \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o BatchMode=yes \
            -o ConnectTimeout=10 \
            -i tmp_key \
            -p ${{ env.NGROK_PORT }} \
            ${{ secrets.SSH_USER }}@${{ env.NGROK_HOST }} \
            "echo 'SSH connection successful'" || true
            
          # Clean up
          rm -f tmp_key

      # Alternative SSH test using native SSH command
      - name: Test SSH Connection (Alternative)
        run: |
          # Write private key to file
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          # Test connection
          ssh -i ~/.ssh/deploy_key \
            -p ${{ env.NGROK_PORT }} \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            ${{ secrets.SSH_USER }}@${{ env.NGROK_HOST }} \
            "echo '✅ SSH connection test successful'" || \
          echo "❌ SSH connection failed - checking server configuration"

          # Debug: Check if we can at least connect to the port
          echo "Testing raw TCP connection..."
          nc -zv -w 5 ${{ env.NGROK_HOST }} ${{ env.NGROK_PORT }} || \
          echo "❌ Cannot connect to SSH port"

      # Manual SSH debugging step
      - name: Debug SSH issues
        run: |
          echo "=== SSH Debug Information ==="
          echo "Host: ${{ env.NGROK_HOST }}"
          echo "Port: ${{ env.NGROK_PORT }}"
          echo "User: ${{ secrets.SSH_USER }}"
          echo "Key available: $([ -n \"${{ secrets.SSH_PRIVATE_KEY }}\" ] && echo \"YES\" || echo \"NO\")"
          echo "============================"

          # Check if ngrok tunnel is still active
          if curl -s http://127.0.0.1:4040/api/tunnels > /dev/null 2>&1; then
            echo "✅ Ngrok tunnel is active"
            curl -s http://127.0.0.1:4040/api/tunnels | jq . 2>/dev/null || \
            curl -s http://127.0.0.1:4040/api/tunnels
          else
            echo "❌ Ngrok tunnel is not responding"
          fi

      # Only proceed if we can verify the tunnel is working
      - name: Verify tunnel before proceeding
        id: verify-tunnel
        run: |
          # Check if we can connect to the tunnel port
          if timeout 5 bash -c "echo > /dev/tcp/${{ env.NGROK_HOST }}/${{ env.NGROK_PORT }}"; then
            echo "✅ Tunnel verification passed"
            echo "proceed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Tunnel verification failed"
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      # Upload packages to server through ngrok tunnel (only if tunnel works)
      - name: Upload backend
        if: steps.verify-tunnel.outputs.proceed == 'true'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.NGROK_HOST }}
          port: ${{ env.NGROK_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "backend.tar.gz"
          target: "/tmp/"

      - name: Upload frontend
        if: steps.verify-tunnel.outputs.proceed == 'true'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.NGROK_HOST }}
          port: ${{ env.NGROK_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "frontend.tar.gz"
          target: "/tmp/"

      # Deploy applications to server
      - name: Deploy backend
        if: steps.verify-tunnel.outputs.proceed == 'true'
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ env.NGROK_HOST }}
          port: ${{ env.NGROK_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "🚀 Starting backend deployment..."

            # Install Node.js if not present
            if ! command -v node &> /dev/null; then
              echo "📦 Installing Node.js..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi

            # Install PM2 if not present
            if ! command -v pm2 &> /dev/null; then
              echo "📦 Installing PM2..."
              sudo npm install -g pm2
            fi

            APP_DIR="/home/roo/backend"
            PM2_APP_NAME="semi-backend"

            # Create app directory
            mkdir -p $APP_DIR

            # Extract and setup backend
            tar -xzf /tmp/backend.tar.gz -C $APP_DIR --strip-components=1
            cd $APP_DIR
            npm install --production

            # Start with PM2
            pm2 delete $PM2_APP_NAME 2>/dev/null || true
            pm2 start npm --name "$PM2_APP_NAME" -- start
            pm2 save
            pm2 startup 2>/dev/null || true

            echo "✅ Backend deployed successfully!"

      - name: Deploy frontend
        if: steps.verify-tunnel.outputs.proceed == 'true'
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ env.NGROK_HOST }}
          port: ${{ env.NGROK_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "🚀 Starting frontend deployment..."

            FRONT_DIR="/var/www/html"

            # Install nginx if not present
            if ! command -v nginx &> /dev/null; then
              echo "📦 Installing nginx..."
              sudo apt update
              sudo apt install nginx -y
            fi

            # Create web directory
            sudo mkdir -p $FRONT_DIR

            # Extract frontend build
            sudo tar -xzf /tmp/frontend.tar.gz -C $FRONT_DIR --strip-components=1
            sudo chown -R www-data:www-data $FRONT_DIR
            sudo chmod -R 755 $FRONT_DIR

            # Configure nginx
            echo "📝 Configuring nginx..."
            sudo bash -c 'cat > /etc/nginx/sites-available/default << EOF
            server {
                listen 80 default_server;
                listen [::]:80 default_server;
                
                root /var/www/html;
                index index.html index.htm;
                
                server_name _;
                
                location / {
                    try_files \$uri \$uri/ /index.html;
                }
                
                # Proxy API requests to backend
                location /api {
                    proxy_pass http://localhost:3000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                }
            }
            EOF'

            # Enable and start nginx
            sudo systemctl enable nginx
            if sudo systemctl is-active --quiet nginx; then
              sudo systemctl reload nginx
            else
              sudo systemctl start nginx
            fi

            echo "✅ Frontend deployed successfully!"

      # Cleanup ngrok tunnel
      - name: Cleanup ngrok tunnel
        if: always()
        run: |
          pkill -f "ngrok tcp" || true
          echo "🔒 Ngrok tunnel closed"
