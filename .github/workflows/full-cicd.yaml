name: Full CI/CD Pipeline

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  # ------------------ Backend Tests ------------------
  backend-test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: Install backend dependencies
        run: cd backend && npm install
      - name: Run backend tests
        run: cd backend && npm test

  # ------------------ Frontend Tests ------------------
  frontend-test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: Install frontend dependencies
        run: cd frontend && npm install
      - name: Run frontend tests
        run: cd frontend && npm test -- --watchAll=false --passWithNoTests

  # ------------------ Deploy to Server ------------------
  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Package applications
      - name: Package backend
        run: tar -czf backend.tar.gz backend

      - name: Build and package frontend
        run: |
          cd frontend
          npm install
          npm run build
          cd ..
          tar -czf frontend.tar.gz frontend/build

      # Test SSH connection to REAL server
      - name: Test SSH Connection
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.SSH_HOST }} # Your REAL server IP
          username: ${{ secrets.SSH_USER }} # Your REAL SSH user
          key: ${{ secrets.SSH_PRIVATE_KEY }} # Your REAL SSH key
          port: ${{ secrets.SSH_PORT }} # 22 (default)
          script: echo "‚úÖ SSH connection successful to real server"

      # Upload packages to REAL server
      - name: Upload backend
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "backend.tar.gz"
          target: "/tmp/"

      - name: Upload frontend
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "frontend.tar.gz"
          target: "/tmp/"

      # Deploy applications to REAL server
      - name: Deploy backend
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            APP_DIR="/home/roo/backend"
            PM2_APP_NAME="semi-backend"

            mkdir -p $APP_DIR
            tar -xzf /tmp/backend.tar.gz -C $APP_DIR --strip-components=1
            cd $APP_DIR
            npm install --production

            pm2 delete $PM2_APP_NAME 2>/dev/null || true
            pm2 start npm --name "$PM2_APP_NAME" -- start
            pm2 save
            echo "‚úÖ Backend deployed successfully!"

      - name: Deploy frontend
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            FRONT_DIR="/var/www/html"
            sudo mkdir -p $FRONT_DIR
            sudo rm -rf $FRONT_DIR/*
            sudo tar -xzf /tmp/frontend.tar.gz -C $FRONT_DIR --strip-components=1
            sudo chown -R www-data:www-data $FRONT_DIR
            sudo chmod -R 755 $FRONT_DIR

            if ! command -v nginx &> /dev/null; then
              sudo apt update
              sudo apt install nginx -y
              sudo systemctl start nginx
              sudo systemctl enable nginx
            fi

            if sudo systemctl is-active --quiet nginx; then
              sudo systemctl reload nginx
            else
              sudo systemctl start nginx
              sudo systemctl enable nginx
            fi
            echo "‚úÖ Frontend deployed successfully!"

      # Setup ngrok tunnel for APPLICATION only (not SSH)
      - name: Setup ngrok for application access
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            # Install ngrok if not installed
            if ! command -v ngrok &> /dev/null; then
              echo "üì¶ Installing ngrok..."
              wget -q https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip -O ngrok.zip
              unzip -q ngrok.zip
              sudo mv ngrok /usr/local/bin/
              rm ngrok.zip ngrok.yml 2>/dev/null || true
            fi

            # Create ngrok config directory and file
            mkdir -p ~/.config/ngrok
            echo "authtoken: ${{ secrets.NGROK_AUTH_TOKEN }}" > ~/.config/ngrok/ngrok.yml
            echo "web_addr: 0.0.0.0:4040" >> ~/.config/ngrok/ngrok.yml

            # Kill any existing ngrok processes
            pkill -f "ngrok http" || true
            sleep 2

            # Start ngrok for port 80 (nginx)
            nohup ngrok http 80 --log=stdout > /tmp/ngrok.log 2>&1 &
            sleep 5

            # Check if ngrok started successfully
            if pgrep -f "ngrok http" > /dev/null; then
              echo "‚úÖ ngrok tunnel started successfully"
              echo "üåê Your application is available at:"
              # Try to get URL with timeout
              for i in {1..10}; do
                URL=$(curl -s http://127.0.0.1:4040/api/tunnels 2>/dev/null | grep -o '"public_url":"[^"]*"' | head -1 | cut -d'"' -f4 || true)
                if [ -n "$URL" ]; then
                  echo "$URL"
                  break
                fi
                sleep 2
              done
              if [ -z "$URL" ]; then
                echo "‚ö†Ô∏è  Could not retrieve URL. Check ngrok logs:"
                cat /tmp/ngrok.log || true
              fi
            else
              echo "‚ùå ngrok failed to start"
              cat /tmp/ngrok.log || true
              exit 1
            fi
